scalar Date
scalar ObjectID

type Query {
  activeCompetenceGoals(competence: String): [ActiveCompetenceGoal]!

}

type Mutation {
   createActiveCompGoal(competenceGoalInput: CompetenceGoalInput): ActiveCompetenceGoal
   # goalStatusToHold(goal_Id: ID): Boolean
   # goalStatusToDone(goal_Id: ID): Boolean
   # goalStatusToActive(goal_Id: ID): Boolean
   updatePerf(updateCompGoalPerfInput: UpdateCompGoalPerfInput): UpdateCompGoalPerfPayload
 #  deleteCompGoal(goal_Id: ID): Boolean
 #  updateCompGoal(goal_Id: ID, updateCompetenceGoalInput: UpdateCompetenceGoalInput): UpdateActiveCompetenceGoalPayload
}
  
type ActiveCompetenceGoal {
    id: ID!
    name: String! 
    competence: String
    target: Int #daily target of goal
    status: GoalStatus      
   # perfHistory: [GoalPerfHistory] 
    
    #date of start active status
    startActive: Date
    #number of days of peforming goal
    dayCount: Int
    weekCount: Int
    # score of perf
    overallPerf: Int #czy potrzebne?
    daysOnTarget: Int #number of days on target
    todayPerf: GoalDayPerf
    goalDaysPerf(from: Date, to: Date): [GoalDayPerf!]
 }

enum GoalStatus{
   ACTIVE
   DONE
   HOLD
}



 type GoalDayPerf {
  id: ID!
  date: Date
  dayOfWeek: Int
  perfCount: Int
  targetIsDone: Boolean
 }

 
 #type GoalPerfHistory  {
     # date of start active status
     #startActive: Date
     #date od end active status
    # endActive: Date
     #number of days of peforming goal
#     dayCount: Int
     # score of perf
 #    overallPerf: Int #czy wywaliÄ‡?
 #    weekCount: Int
 #    goalEffectivenes: Int
 #}


 input CompetenceGoalInput {
   name: String!
   competence: String!
   target: Int!
 }

 input UpdateCompGoalPerfInput {
   compGoal_Id: ID
   day: Date
   value: Int
 }

#
#input UpdateCompetenceGoalInput {
#     name: String
#     competence: String
#     target: Int
#     }


type UpdateCompGoalPerfPayload {
    
   activeCompetenceGoal: ActiveCompetenceGoal
}





