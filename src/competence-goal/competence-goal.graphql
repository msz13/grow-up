scalar Date
scalar ObjectID

type Query {
    competenceGoals(status: GoalStatus, competence: String): [CompetenceGoal]

}

type Mutation {
    createCompGoal(competenceGoalInput: CompetenceGoalInput): CompetenceGoal
   # goalStatusToHold(goal_Id: ID): Boolean
   # goalStatusToDone(goal_Id: ID): Boolean
   # goalStatusToActive(goal_Id: ID): Boolean
   updatePerf(compGoal_Id: ID, fDayOfWeek: GraphQLDate, dayOfWeek: Int): updateCompGoalPerfPayload
   deleteCompGoal(goal_Id: ID): Boolean
    updateCompGoal(goal_Id: ID, updateCompetenceGoalInput: UpdateCompetenceGoalInput): CompetenceGoal
}
  
type CompetenceGoal {
    id: ObjectID
    name: String! 
    competence: String
    target: Int #daily target of goal
    status: GoalStatus      
    perfHistory: [GoalPerfHistory] 
    
    # date of start active status
    startActive: Date
    #number of days of peforming goal
    dayCount: Int
    weekCount: Int
    # score of perf
    overallPerf: Int #czy potrzebne?
    goalEffectivenes: Int #number of days on target
    goalDaysPerf(from: Date, to: Date): [GoalDayPerf!]
 }

 enum GoalStatus{
    ACTIVE
    DONE
    HOLD
 }



 type GoalDayPerf {
     date: Date
     perfCount: Int
     targetIsDone: Boolean
 }

 
 type GoalPerfHistory  {
     # date of start active status
     startActive: Date
     #date od end active status
     endActive: Date
     #number of days of peforming goal
     dayCount: Int
     # score of perf
     overallPerf: Int #czy wywaliÄ‡?
     weekCount: Int
     goalEffectivenes: Int
 }


 input CompetenceGoalInput {
     name: String!
     competence: String!
     target: Int!
     }


input UpdateCompetenceGoalInput {
     name: String
     competence: String
     target: Int
     }


type updateCompGoalPerfPayload {
    
    competenceGoal: CompetenceGoal
}
     }





